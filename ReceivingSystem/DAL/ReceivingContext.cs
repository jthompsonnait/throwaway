// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using ReceivingSystem.Entities;

namespace ReceivingSystem.DAL;

internal partial class ReceivingContext : DbContext
{
    public ReceivingContext(DbContextOptions<ReceivingContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Part> Parts { get; set; }

    public virtual DbSet<PurchaseOrder> PurchaseOrders { get; set; }

    public virtual DbSet<PurchaseOrderDetail> PurchaseOrderDetails { get; set; }

    public virtual DbSet<ReceiveOrder> ReceiveOrders { get; set; }

    public virtual DbSet<ReceiveOrderDetail> ReceiveOrderDetails { get; set; }

    public virtual DbSet<ReturnedOrderDetail> ReturnedOrderDetails { get; set; }

    public virtual DbSet<UnorderedPurchaseItemCart> UnorderedPurchaseItemCarts { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AS");

        modelBuilder.Entity<Part>(entity =>
        {
            entity.HasKey(e => e.PartID).HasName("PK_Part_PartID");

            entity.Property(e => e.Refundable)
                .HasDefaultValue("Y")
                .IsFixedLength();

            entity.HasOne(d => d.Vendor).WithMany(p => p.Parts).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PurchaseOrder>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderID).HasName("PK_PurchaseOrder_PurchaseOrderID");

            entity.HasOne(d => d.Vendor).WithMany(p => p.PurchaseOrders).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<PurchaseOrderDetail>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderDetailID).HasName("PK_PurchaseOrderDetail_PurchaseOrderDetailID");

            entity.HasOne(d => d.Part).WithMany(p => p.PurchaseOrderDetails).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.PurchaseOrderDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ReceiveOrder>(entity =>
        {
            entity.HasKey(e => e.ReceiveOrderID).HasName("PK_ReceiveOrder_ReceiveOrderID");

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.ReceiveOrders).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ReceiveOrderDetail>(entity =>
        {
            entity.HasKey(e => e.ReceiveOrderDetailID).HasName("PK_ReceiveOrderDetail_ReceiveOrderDetailID");

            entity.HasOne(d => d.PurchaseOrderDetail).WithMany(p => p.ReceiveOrderDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ReceiveOrderDetail_PurchaseOrderDetail_OrderDetailID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.ReceiveOrderDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<ReturnedOrderDetail>(entity =>
        {
            entity.HasKey(e => e.ReturnedOrderDetailID).HasName("PK_ReturnedOrderDetail_ReturnOrderDetailID");

            entity.HasOne(d => d.PurchaseOrderDetail).WithMany(p => p.ReturnedOrderDetails).HasConstraintName("FK_ReturnedOrderDetail_PurchaseOrderDetail_OrderDetailID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.ReturnedOrderDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<UnorderedPurchaseItemCart>(entity =>
        {
            entity.HasKey(e => e.UnorderedItemID).HasName("PK_UnorderedPurchaseItemCart_CartID");

            entity.HasOne(d => d.ReceiveOrder).WithMany(p => p.UnorderedPurchaseItemCarts)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UnorderedPurchaseItemCart_ReceiveOrder");
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.VendorID).HasName("PK_Vendor_VendorID");

            entity.Property(e => e.PostalCode).IsFixedLength();
            entity.Property(e => e.ProvinceID)
                .HasDefaultValue("AB")
                .IsFixedLength();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}