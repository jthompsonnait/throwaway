// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using SalesReturnsSystem.Entities;

namespace SalesReturnsSystem.DAL;

internal partial class SalesReturnsContext : DbContext
{
    public SalesReturnsContext(DbContextOptions<SalesReturnsContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Part> Parts { get; set; }

    public virtual DbSet<Sale> Sales { get; set; }

    public virtual DbSet<SaleDetail> SaleDetails { get; set; }

    public virtual DbSet<SaleRefund> SaleRefunds { get; set; }

    public virtual DbSet<SaleRefundDetail> SaleRefundDetails { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Latin1_General_CI_AS");

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryID).HasName("PK_Category_CategoryID");
        });

        modelBuilder.Entity<Coupon>(entity =>
        {
            entity.HasKey(e => e.CouponID).HasName("PK_Coupon_CouponID");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerID).HasName("PK_Customer_CustomerID");

            entity.Property(e => e.ContactPhone).IsFixedLength();
            entity.Property(e => e.PostalCode).IsFixedLength();
            entity.Property(e => e.Province).IsFixedLength();
        });

        modelBuilder.Entity<Part>(entity =>
        {
            entity.HasKey(e => e.PartID).HasName("PK_Part_PartID");

            entity.Property(e => e.Refundable)
                .HasDefaultValue("Y")
                .IsFixedLength();

            entity.HasOne(d => d.Category).WithMany(p => p.Parts).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Sale>(entity =>
        {
            entity.HasKey(e => e.SaleID).HasName("PK_Sale_SaleID");

            entity.Property(e => e.PaymentType).IsFixedLength();
            entity.Property(e => e.SaleDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Customer).WithMany(p => p.Sales).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<SaleDetail>(entity =>
        {
            entity.HasKey(e => e.SaleDetailID).HasName("PK_SaleDetail_SaleDetailID");

            entity.HasOne(d => d.Part).WithMany(p => p.SaleDetails).OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Sale).WithMany(p => p.SaleDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<SaleRefund>(entity =>
        {
            entity.HasKey(e => e.SaleRefundID).HasName("PK_SaleRefund_SaleRefundID");

            entity.Property(e => e.SaleRefundDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Sale).WithMany(p => p.SaleRefunds)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("CK_SaleRefund_Sale_SaleID");
        });

        modelBuilder.Entity<SaleRefundDetail>(entity =>
        {
            entity.HasKey(e => e.SaleRefundDetailID).HasName("PK_SaleRefundDetail_SaleRefundDetailID");

            entity.HasOne(d => d.Part).WithMany(p => p.SaleRefundDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_SaleRefundDetail_Part_PartId");

            entity.HasOne(d => d.SaleRefund).WithMany(p => p.SaleRefundDetails).OnDelete(DeleteBehavior.ClientSetNull);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}